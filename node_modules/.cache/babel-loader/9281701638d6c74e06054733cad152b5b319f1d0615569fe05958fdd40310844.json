{"ast":null,"code":"import { createAsyncThunk, createSlice } from '@reduxjs/toolkit';\nexport const fetchMovies = createAsyncThunk('fetch-movies', async apiUrl => {\n  const response = await fetch(apiUrl);\n  return response.json();\n});\nconst moviesSlice = createSlice({\n  name: 'movies',\n  initialState: {\n    movies: [],\n    fetchStatus: '',\n    page: 1\n  },\n  reducers: {},\n  extraReducers: builder => {\n    builder.addCase(fetchMovies.fulfilled, (state, action) => {\n      if (state.fetchStatus === 'loading') {\n        // let results = [...state.movies];\n        console.log(action.payload);\n        // state.page = action.payload.page + 1;\n\n        // state.movies.length > 0\n        //   ? (results = [...results, ...action.payload.results])\n        //   : (results = action.payload.results);\n\n        console.log(state.page);\n        // state.movies = results;\n\n        state.movies = action.payload.results;\n        state.fetchStatus = 'success';\n      }\n    }).addCase(fetchMovies.pending, state => {\n      state.fetchStatus = 'loading';\n    }).addCase(fetchMovies.rejected, state => {\n      state.fetchStatus = 'error';\n    });\n  }\n});\nexport default moviesSlice;","map":{"version":3,"names":["createAsyncThunk","createSlice","fetchMovies","apiUrl","response","fetch","json","moviesSlice","name","initialState","movies","fetchStatus","page","reducers","extraReducers","builder","addCase","fulfilled","state","action","console","log","payload","results","pending","rejected"],"sources":["/Users/ignaciofilippi/Documents/test/test-leo/coding-assignment/src/data/moviesSlice.js"],"sourcesContent":["import { createAsyncThunk, createSlice } from '@reduxjs/toolkit';\n\nexport const fetchMovies = createAsyncThunk('fetch-movies', async (apiUrl) => {\n  const response = await fetch(apiUrl);\n  return response.json();\n});\n\nconst moviesSlice = createSlice({\n  name: 'movies',\n  initialState: {\n    movies: [],\n    fetchStatus: '',\n    page: 1,\n  },\n  reducers: {},\n  extraReducers: (builder) => {\n    builder\n      .addCase(fetchMovies.fulfilled, (state, action) => {\n        if (state.fetchStatus === 'loading') {\n          // let results = [...state.movies];\n          console.log(action.payload);\n          // state.page = action.payload.page + 1;\n\n          // state.movies.length > 0\n          //   ? (results = [...results, ...action.payload.results])\n          //   : (results = action.payload.results);\n\n          console.log(state.page);\n          // state.movies = results;\n\n          state.movies = action.payload.results;\n          state.fetchStatus = 'success';\n        }\n      })\n      .addCase(fetchMovies.pending, (state) => {\n        state.fetchStatus = 'loading';\n      })\n      .addCase(fetchMovies.rejected, (state) => {\n        state.fetchStatus = 'error';\n      });\n  },\n});\n\nexport default moviesSlice;\n"],"mappings":"AAAA,SAASA,gBAAgB,EAAEC,WAAW,QAAQ,kBAAkB;AAEhE,OAAO,MAAMC,WAAW,GAAGF,gBAAgB,CAAC,cAAc,EAAE,MAAOG,MAAM,IAAK;EAC5E,MAAMC,QAAQ,GAAG,MAAMC,KAAK,CAACF,MAAM,CAAC;EACpC,OAAOC,QAAQ,CAACE,IAAI,EAAE;AACxB,CAAC,CAAC;AAEF,MAAMC,WAAW,GAAGN,WAAW,CAAC;EAC9BO,IAAI,EAAE,QAAQ;EACdC,YAAY,EAAE;IACZC,MAAM,EAAE,EAAE;IACVC,WAAW,EAAE,EAAE;IACfC,IAAI,EAAE;EACR,CAAC;EACDC,QAAQ,EAAE,CAAC,CAAC;EACZC,aAAa,EAAGC,OAAO,IAAK;IAC1BA,OAAO,CACJC,OAAO,CAACd,WAAW,CAACe,SAAS,EAAE,CAACC,KAAK,EAAEC,MAAM,KAAK;MACjD,IAAID,KAAK,CAACP,WAAW,KAAK,SAAS,EAAE;QACnC;QACAS,OAAO,CAACC,GAAG,CAACF,MAAM,CAACG,OAAO,CAAC;QAC3B;;QAEA;QACA;QACA;;QAEAF,OAAO,CAACC,GAAG,CAACH,KAAK,CAACN,IAAI,CAAC;QACvB;;QAEAM,KAAK,CAACR,MAAM,GAAGS,MAAM,CAACG,OAAO,CAACC,OAAO;QACrCL,KAAK,CAACP,WAAW,GAAG,SAAS;MAC/B;IACF,CAAC,CAAC,CACDK,OAAO,CAACd,WAAW,CAACsB,OAAO,EAAGN,KAAK,IAAK;MACvCA,KAAK,CAACP,WAAW,GAAG,SAAS;IAC/B,CAAC,CAAC,CACDK,OAAO,CAACd,WAAW,CAACuB,QAAQ,EAAGP,KAAK,IAAK;MACxCA,KAAK,CAACP,WAAW,GAAG,OAAO;IAC7B,CAAC,CAAC;EACN;AACF,CAAC,CAAC;AAEF,eAAeJ,WAAW"},"metadata":{},"sourceType":"module","externalDependencies":[]}